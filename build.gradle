buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.oliver'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	mybatisGenerator
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	runtimeOnly('mysql:mysql-connector-java')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	compile group: 'io.shardingsphere', name: 'sharding-jdbc-spring-boot-starter', version: '3.0.0'
	compile group: 'io.shardingsphere', name: 'sharding-jdbc-spring-namespace', version: '3.0.0'

	compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.5.0'
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
	mybatisGenerator 'mysql:mysql-connector-java:5.1.36'
	mybatisGenerator 'tk.mybatis:mapper:3.3.2'
}

task mybatisGenerate << {
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: 'src/main/resources/generator/generatorConfig.xml', verbose: true)
}